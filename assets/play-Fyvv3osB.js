const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./index-BguBHJg9.js","./InlineLoader-olTLTqPR.js","./ton-vendor-C5ZEPYsr.js","./ton-assembly-test-dev-DhihHBLs.js","./InlineLoader-fi41-xDu.css","./monaco-editor-core-BNZEfIW9.js","./monaco-editor-core-GL-q52Lm.css","./index-CW3wO_9q.css"])))=>i.map(i=>d[i]);
var Y=Object.defineProperty;var J=(s,n,e)=>n in s?Y(s,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[n]=e;var I=(s,n,e)=>J(s,typeof n!="symbol"?n+"":n,e);import{d as w,a as b,j as o,B as q,F as Q,R as L,r as i,u as X,I as Z,b as ee,G as te,T as oe,H as ne,P as se}from"./InlineLoader-olTLTqPR.js";import{_ as ae}from"./monaco-editor-core-BNZEfIW9.js";import{m as re,f as ie,u as ce,a as le,n as j,S as ue,T as de}from"./useTraceStepper-B-i2M9NL.js";import{r as me}from"./ton-sandbox-DHhCxGTc.js";import pe from"./index-B_mwvkjD.js";import{B as he,d as ge,u as xe,S as ye,T as fe}from"./ButtonLoader-BT5sI0d4.js";import"./ton-vendor-C5ZEPYsr.js";import"./ton-assembly-test-dev-DhihHBLs.js";var N=me();function be(s){const n=new b.TupleBuilder;for(const e of s)switch(e.$){case"Integer":n.writeNumber(e.value);break;case"Cell":try{const l=b.Cell.fromHex(e.boc);n.writeCell(l)}catch{console.warn("Invalid cell BoC, skipping:",e.boc)}break;case"Slice":try{const l=b.Cell.fromHex(e.hex);n.writeSlice(l.beginParse())}catch{console.warn("Invalid slice hex, skipping:",e.hex)}break;case"Null":break;default:console.warn("Unsupported stack element type:",e.$)}return n}const Ce=async(s,n=0,e=[])=>{class l{constructor(x,y){I(this,"address");I(this,"init");this.address=x,this.init=y}async send(x,y,S,E){await x.internal(y,{...S,body:E})}async getAny(x,y,S){const E=be(S),k=await x.get(y,E.build());return[k.stack,k.vmLogs]}}const c=await N.Blockchain.create();c.verbosity.print=!1,c.verbosity.vmLogs="vm_logs_verbose";const u=await c.treasury("treasure"),a={code:s,data:new b.Cell},d=b.contractAddress(0,a),p=new l(d,a),g=c.openContract(p);await g.send(u.getSender(),{value:b.toNano("10")},new b.Cell);const[C,m]=await g.getAny(n,e);return[C,m]};class Se extends Error{constructor(n){super(n),this.name="TasmCompilationError"}}const Ee=async(s,n=[])=>{const e=w.text.parse("playground.tasm",s);if(e.$==="ParseFailure"){const a=e.error.loc,d=a.file+":"+(a.line+1);throw new Se(d+": "+e.error.message)}const[l,c]=w.runtime.compileCellWithMapping(e.instructions),u=re.createMappingInfo(c);try{const[a,d]=await Ce(l,0,n),p=w.trace.createTraceInfoPerTransaction(d,u,void 0)[0];return{stack:a,vmLogs:d,instructions:e.instructions,code:s,mappingInfo:u,exitCode:void 0,traceInfo:p}}catch(a){if(a instanceof N.GetMethodError){const d=w.trace.createTraceInfoPerTransaction(a.vmLogs,u,void 0)[0],p=ie(a.vmLogs,u);return{stack:{items:[],remaining:0},vmLogs:a.vmLogs,instructions:e.instructions,code:s,mappingInfo:u,exitCode:p,traceInfo:d}}throw a}},ve="_traceViewWrapper_15fn7_1",ke="_appContainer_15fn7_9",we="_headerContent_15fn7_19",Te="_txStatusContainer_15fn7_25",_e="_mainActionContainer_15fn7_32",Ie="_mainContent_15fn7_40",Pe="_executeButton_15fn7_84",f={traceViewWrapper:ve,appContainer:ke,headerContent:we,txStatusContainer:Te,mainActionContainer:_e,mainContent:Ie,executeButton:Pe};function je({onClick:s,loading:n}){return o.jsx(q,{onClick:s,disabled:n,className:f.executeButton,title:n?"Executing Assembly Code...":"Execute Assembly Code (Ctrl/Cmd+Enter)","aria-label":n?"Executing assembly code...":"Execute assembly code","aria-describedby":"execution-status","aria-keyshortcuts":"Control+Enter",children:n?o.jsx(he,{children:"Execute"}):o.jsxs(o.Fragment,{children:[o.jsx(Q,{size:16,"aria-hidden":"true"}),"Execute"]})})}const Ae=[{title:"Welcome to Assembly Playground",content:`This tool lets you write and execute TON Assembly (TVM) code step by step.

Perfect for learning TVM instructions and debugging smart contracts!

Press Esc to close this tutorial at any time.`,target:"",placement:"bottom"},{title:"Assembly Code Editor",content:`Here you can write your TVM assembly instructions.

Each line represents one instruction that will be executed by the TVM.

The default code shows basic stack operations - feel free to modify it!`,target:'[class*="mainContent"] > div:first-child',placement:"right"},{title:"Initial Stack Setup",content:`Before executing code, you can set up an initial stack with test values.

This is useful for testing functions that expect specific inputs.`,target:'[class*="stack-viewer"]',placement:"left"},{title:"Add Elements onto the Stack",content:"Click + button to add elements onto the Stack one by one, or click Import button to insert the entire stack from VM logs",target:'[class*="stack-header-actions"]',placement:"left"},{title:"Execute Your Code",content:`I'll automatically execute the code for you to demonstrate the trace functionality.

Click Execute manually or press Ctrl+Enter to run your assembly code.`,target:'[role="toolbar"] button:first-child',placement:"bottom",autoAction:{type:"click",selector:'[role="toolbar"] button:first-child',delay:400}},{title:"Execution Status",content:`The status badge shows if the execution succeeded or failed.

â€¢ Green badge - Successful execution (exit code 0)
â€¢ Red badge - Failed execution (non-zero exit code)

Exit codes help identify what went wrong in the code.`,target:'[role="status"]',placement:"bottom"},{title:"Great! Code Executed",content:`Perfect! The code execution completed successfully.

On the right panel, you can now view the initial stack state before the first instruction execution.`,target:'[class*="mainContent"] > div:last-child',placement:"left"},{title:"Navigate Through Steps",content:`Use the navigation buttons to step through your code execution.

I'll automatically click the 'Next' button to show you how the stack changes.

Watch the stack section below!`,target:'[class*="navigation-controls"]',placement:"left",autoAction:{type:"click",selector:'[data-testid="next-step-button"]',delay:400}},{title:"Gas Usage Tracking",content:`Notice how the gas counter increased!

Each TVM instruction consumes gas (computational cost).

This helps you optimize your smart contracts for efficiency.`,target:'[data-testid="cumulative-gas-counter"]',placement:"left"},{title:"Stack Visualization",content:`Look at the stack section below - see how values changed!

TVM is a stack-based virtual machine. Instructions push/pop values to/from the stack.

Try clicking Next/Prev buttons to see the stack evolve.`,target:'[class*="stack-viewer"]',placement:"left"},{title:"Share Your Code",content:`Use the share button to generate links to your code.

Perfect for collaboration, asking for help, or showcasing your smart contracts!`,target:'[role="toolbar"] button:nth-child(2)',placement:"bottom"},{title:"Ready to Code!",content:`You're all set! You now know how to:

â€¢ Write assembly code
â€¢ Execute and debug step by step
â€¢ Monitor gas usage and stack changes
â€¢ Set up initial test conditions

Try modifying the code or writing your own code.

Happy debugging! ðŸš€`,target:'[role="toolbar"]',placement:"bottom"}],Le=L.lazy(()=>ae(()=>import("./index-BguBHJg9.js"),__vite__mapDeps([0,1,2,3,4,5,6,7]),import.meta.url)),Ne=`PUSHINT_8 42
PUSHINT_8 100
ADD
PUSHINT_16 200
SUB

NOP
`,A="txtracer-playground-assembly-code",P="txtracer-playground-initial-stack";function Be(){const[s,n]=i.useState(()=>{const t=ge();return t?t.includes(`\r
`)?t:t.replace(/\n/g,`\r
`):localStorage.getItem(A)??Ne}),[e,l]=i.useState(void 0),[c,u]=i.useState(!1),[a,d]=i.useState(()=>{try{const t=localStorage.getItem(P);return t?JSON.parse(t,(r,h)=>{if(r==="value"&&typeof h=="string"&&h.match(/^-?\d+$/))try{return BigInt(h)}catch{return h}return h}):[]}catch(t){return localStorage.removeItem(P),console.warn("Failed to restore initial stack from localStorage:",t),[]}}),{setError:p,clearError:g}=X(),C=xe({tutorialKey:"playground-page",autoStart:!0}),m=e?.traceInfo,{selectedStep:v,currentStep:x,currentStack:y,totalSteps:S,canGoPrev:E,canGoNext:k,handlePrev:B,handleNext:M,goToFirstStep:G,goToLastStep:O,findStepByLine:R,highlightLine:V,transitionType:D}=ce(m),F=le(m),U=i.useMemo(()=>m?m.steps.map(t=>({name:t.instructionName,gasCost:j(t)})):[],[m]),H=i.useMemo(()=>{if(!m)return 0;let t=0;for(let r=0;r<v;r++){const h=m.steps[r];h&&(t+=j(h))}return t},[m,v]),T=i.useCallback(async()=>{if(s.trim()){u(!0),g();try{const t=await Ee(s,a);l(t),console.log(t.vmLogs)}catch(t){const r=t instanceof Error?t.message:"Unknown error";p(`Failed to execute assembly code: ${r}`),l(void 0)}finally{u(!1)}}},[s,g,a,p]);i.useEffect(()=>{const t=r=>{(r.ctrlKey||r.metaKey)&&r.key==="Enter"&&(r.preventDefault(),c||T())};return document.addEventListener("keydown",t),()=>{document.removeEventListener("keydown",t)}},[T,c]),i.useEffect(()=>{localStorage.setItem(A,s)},[s]),i.useEffect(()=>{try{localStorage.setItem(P,JSON.stringify(a,(t,r)=>typeof r=="bigint"?r.toString():r))}catch(t){console.warn("Failed to save initial stack to localStorage:",t)}},[a]);const W=i.useCallback(t=>{n(t),l(void 0),g()},[g]),$=i.useCallback(t=>{d(t),l(void 0)},[]),_=i.useMemo(()=>{if(e)return e.exitCode&&e.exitCode.num!==0?"failed":"success"},[e]),z=_!==void 0,K=`Exit code: ${e?.exitCode?.num??0}`;return o.jsxs("div",{className:f.traceViewWrapper,children:[o.jsxs(pe,{pageTitle:"playground",children:[z&&o.jsx("div",{className:f.txStatusContainer,role:"status","aria-live":"polite",children:_&&o.jsx(ue,{type:_,text:K})}),o.jsx("div",{className:f.headerContent,children:o.jsxs("div",{className:f.mainActionContainer,role:"toolbar","aria-label":"Assembly code actions",children:[o.jsx(je,{onClick:()=>void T(),loading:c}),o.jsx(ye,{value:s})]})})]}),o.jsxs("div",{id:"execution-status",className:"sr-only","aria-live":"polite","aria-atomic":"true",children:[c&&"Executing assembly code...",e&&!c&&"Assembly code executed successfully",e?.exitCode&&e.exitCode.num!==0&&!c&&`Execution completed with exit code ${e.exitCode.num}`]}),o.jsx("div",{className:"sr-only",children:"Press Ctrl+Enter or Cmd+Enter to execute the assembly code"}),o.jsx("main",{className:f.appContainer,role:"main","aria-label":"Assembly code playground",children:o.jsxs("div",{className:f.mainContent,children:[o.jsxs("div",{style:{flex:"1",position:"relative"},children:[o.jsx("h2",{id:"code-editor-heading",className:"sr-only",children:"Assembly Code Editor"}),o.jsx(i.Suspense,{fallback:o.jsx(Z,{message:"Loading Editor...",loading:!0}),children:o.jsx(Le,{code:s,onChange:W,readOnly:!1,highlightLine:V,lineExecutionData:F,shouldCenter:D==="button",exitCode:e?.exitCode,onLineClick:R})})]}),o.jsx(de,{selectedStep:v,totalSteps:S,currentStep:x,currentStack:y,canGoPrev:E,canGoNext:k,onPrev:B,onNext:M,onFirst:G,onLast:O,placeholderMessage:"Ready to execute",instructionDetails:U,cumulativeGas:H,showGas:!0,showStackSetup:!0,initialStack:a,onInitialStackChange:$,hasExecutionResults:!!e})]})}),o.jsx(fe,{steps:Ae,isOpen:C.isOpen,onClose:C.closeTutorial,onComplete:C.completeTutorial})]})}ee.createRoot(document.getElementById("root")).render(o.jsx(L.StrictMode,{children:o.jsx(te,{children:o.jsx(oe,{children:o.jsx(ne,{children:o.jsx(se,{loadingMessage:"Loading Playground...",children:o.jsx(Be,{})})})})})}));
